@page "/matches/{matchId:int}"
@namespace RacketReel.Web.Pages

<PageTitle>Match @MatchId | Racket Reel</PageTitle>

@using RacketReel.Web.Data
@using System
@using System.Threading

@implements IDisposable
@inject MatchService MatchService

@if (match == null || latestState == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>@String.Join(" vs ", match.Players)</h1>
    <h2>@match.CreatedDateTime.ToShortDateString() at @match.CreatedDateTime.ToShortTimeString()</h2>

    @foreach (var player in match.Players)
    {
        <p>@player @latestState.Score[player].Points @latestState.Score[player].Games @latestState.Score[player].Sets</p>
    }
}

@code {
    [Parameter]
    public int MatchId { get; set; }

    private Match? match;
    private State? latestState;

    private Timer? updateLatestStateTimer;

    protected override async Task OnInitializedAsync()
    {
        match = await MatchService.GetMatchAsync(MatchId);

        // Create a timer to poll for updates to the match state
        updateLatestStateTimer = new Timer(
            UpdateLatestStateAsync,
            new AutoResetEvent(false),
            0, // call immediately
            1000 // then every 1s
        );
    }

    void IDisposable.Dispose()
    {
        // Stop the timer when the user leaves the page
        updateLatestStateTimer?.Dispose();
    }

    private async void UpdateLatestStateAsync(object? timerCallbackState)
    {
        latestState = await MatchService.GetLatestMatchStateAsync(MatchId);
        await InvokeAsync(() => StateHasChanged());
    }
}
