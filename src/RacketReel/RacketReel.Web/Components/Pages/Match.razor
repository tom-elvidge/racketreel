@page "/match/{matchId}"

@rendermode InteractiveServer

@implements IDisposable

@using RacketReel.Web.Domain
@using System.Threading

<PageTitle>@GetMatchName()</PageTitle>

<div class="d-flex flex-column align-center justify-center h-100">
    @if (_matchState != null)
    {
        <div class="d-flex flex-column mb-2 align-center">
            <div class="font-size-xl">@GetMatchName()</div>
            <div class="font-size-sm">@_matchState.Format</div>
            <div class="font-size-sm">
                <LocalTime DateTimeOffset="@_matchState.MatchStartedAtUtc" Format="dd MMMM yyyy" />
                at
                <LocalTime DateTimeOffset="@_matchState.MatchStartedAtUtc" Format="H:mm:ss" />
            </div>
        </div>
        
        <div>
            <div class="d-flex flex-column border rounded">
                <div class="d-flex flex-row">
                    <div class="text-align-center serve-indicator-container">
                        @(_matchState.TeamOneIsServing ? "*" : "")
                    </div>
                    <div class="text-align-left name-container">@_matchState.TeamOneName</div>
                    <div class="text-align-center set-container">@_matchState.TeamOneSets</div>
                    <div class="text-align-center game-container">@_matchState.TeamOneGames</div>
                    <div class="text-align-center point-container">@_matchState.TeamOnePoints</div>
                </div>
                <div class="d-flex flex-row">
                    
                    <div class="text-align-center serve-indicator-container">
                        @(_matchState.TeamOneIsServing ? "" : "*")
                    </div>
                    <div class="text-align-left name-container">@_matchState.TeamTwoName</div>
                    <div class="text-align-center set-container">@_matchState.TeamTwoSets</div>
                    <div class="text-align-center game-container">@_matchState.TeamTwoGames</div>
                    <div class="text-align-center point-container">@_matchState.TeamTwoPoints</div>
                </div>
            </div>
            <div class="d-flex flex-row w-100">
                <div class="font-size-sm">
                    <LocalTime DateTimeOffset="@_matchState.StateCreatedAtUtc" Format="H:mm:ss" />
                </div>
                <div class="flex-grow-1"></div>
                <div class="font-size-sm">@_timeSinceLastUpdate</div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public required string? MatchId { get; set; }

    [Inject]
    public required IMatchesProvider MatchesProvider { get; set; }
    
    [Inject]
    public required TimeProvider TimeProvider { get; set; }

    private MatchState? _matchState;
    private string? _timeSinceLastUpdate;

    private Timer? _timer;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        
        if (firstRender)
        {
            _timer = new Timer(
                _ => {
                    var delta = TimeProvider.GetUtcNow() - _matchState?.StateCreatedAtUtc;
                    if (delta == null) return;
                    _timeSinceLastUpdate = GetTimeSinceLastUpdateString(delta.Value);
                    InvokeAsync(StateHasChanged);
                },
                null,
                0,
                1000);
            
            await foreach (var matchState in MatchesProvider.GetMatchStateStream(int.Parse(MatchId!)))
            {
                _matchState = matchState;
                StateHasChanged();
            }
        }
    }

    private string GetMatchName()
    {
        var teamOneSurname = _matchState?.TeamOneName.Split(" ").LastOrDefault();
        var teamTwoSurname = _matchState?.TeamTwoName.Split(" ").LastOrDefault();
        
        if (_matchState == null ||
            string.IsNullOrWhiteSpace(teamOneSurname) ||
            string.IsNullOrWhiteSpace(teamTwoSurname))
        {
            return $"Match {MatchId}";
        }

        return $"{teamOneSurname} / {teamTwoSurname}";
    }

    private static string GetTimeSinceLastUpdateString(TimeSpan delta)
    {
        if (delta < TimeSpan.FromSeconds(2))
            return "Just now";

        if (delta < TimeSpan.FromSeconds(60))
            return $"{Convert.ToInt32(Math.Floor(delta.TotalSeconds))}s ago";

        if (delta < TimeSpan.FromMinutes(60))
            return $"{Convert.ToInt32(Math.Floor(delta.TotalMinutes))}m ago";
        
        if (delta < TimeSpan.FromHours(24))
            return $"{Convert.ToInt32(Math.Floor(delta.TotalHours))}hrs ago";

        return "";
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}