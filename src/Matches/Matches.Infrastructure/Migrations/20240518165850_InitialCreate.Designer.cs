// <auto-generated />
using System;
using Matches.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Matches.Infrastructure.Migrations
{
    [DbContext(typeof(MatchesContext))]
    [Migration("20240518165850_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("Matcheseq", "Matches")
                .IncrementsBy(10);

            modelBuilder.HasSequence("Matchseq", "Matches")
                .IncrementsBy(10);

            modelBuilder.HasSequence("Stateseq", "Matches")
                .IncrementsBy(10);

            modelBuilder.Entity("Matches.Domain.AggregatesModel.MatchAggregate.MatchEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "Matchseq", "Matches");

                    b.Property<DateTime>("CompletedAtDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CompletedAtDateTime");

                    b.Property<DateTime>("CreatedAtDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAtDateTime");

                    b.Property<int>("ServingFirst")
                        .HasColumnType("integer")
                        .HasColumnName("ServingFirst");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Matches", "Matches");
                });

            modelBuilder.Entity("Matches.Domain.AggregatesModel.MatchAggregate.StateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "Stateseq", "Matches");

                    b.Property<DateTime>("CreatedAtDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAtDateTime");

                    b.Property<bool>("Highlight")
                        .HasColumnType("boolean")
                        .HasColumnName("Highlight");

                    b.Property<int>("MatchEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("Serving")
                        .HasColumnType("integer")
                        .HasColumnName("Serving");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MatchEntityId");

                    b.ToTable("States", "Matches");
                });

            modelBuilder.Entity("Matches.Domain.AggregatesModel.MatchAggregate.MatchEntity", b =>
                {
                    b.OwnsOne("Matches.Domain.AggregatesModel.MatchAggregate.Formats.Format", "Format", b1 =>
                        {
                            b1.Property<int>("MatchEntityId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseHiLo(b1.Property<int>("MatchEntityId"), "Matchseq", "Matches");

                            b1.Property<bool>("GameAdvantage")
                                .HasColumnType("boolean")
                                .HasColumnName("GameAdvantage");

                            b1.Property<int>("Games")
                                .HasColumnType("integer")
                                .HasColumnName("Games");

                            b1.Property<int>("Sets")
                                .HasColumnType("integer")
                                .HasColumnName("Sets");

                            b1.Property<bool>("SuddenDeathDeuce")
                                .HasColumnType("boolean")
                                .HasColumnName("SuddenDeathDeuce");

                            b1.Property<int>("TiebreakRule")
                                .HasColumnType("integer")
                                .HasColumnName("TiebreakRule");

                            b1.Property<bool?>("_gameAdvantageFinalSet")
                                .HasColumnType("boolean")
                                .HasColumnName("_gameAdvantageFinalSet");

                            b1.Property<int?>("_gamesFinalSet")
                                .HasColumnType("integer")
                                .HasColumnName("_gamesFinalSet");

                            b1.Property<int?>("_tiebreakRuleFinalSet")
                                .HasColumnType("integer")
                                .HasColumnName("_tiebreakRuleFinalSet");

                            b1.HasKey("MatchEntityId");

                            b1.ToTable("Matches", "Matches");

                            b1.WithOwner()
                                .HasForeignKey("MatchEntityId");
                        });

                    b.OwnsOne("Matches.Domain.AggregatesModel.MatchAggregate.Participants.NoUserParticipant", "ParticipantOne", b1 =>
                        {
                            b1.Property<int>("MatchEntityId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseHiLo(b1.Property<int>("MatchEntityId"), "Matcheseq", "Matches");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.HasKey("MatchEntityId");

                            b1.ToTable("Matches", "Matches");

                            b1.WithOwner()
                                .HasForeignKey("MatchEntityId");
                        });

                    b.OwnsOne("Matches.Domain.AggregatesModel.MatchAggregate.Participants.NoUserParticipant", "ParticipantTwo", b1 =>
                        {
                            b1.Property<int>("MatchEntityId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseHiLo(b1.Property<int>("MatchEntityId"), "Matcheseq", "Matches");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.HasKey("MatchEntityId");

                            b1.ToTable("Matches", "Matches");

                            b1.WithOwner()
                                .HasForeignKey("MatchEntityId");
                        });

                    b.Navigation("Format");

                    b.Navigation("ParticipantOne");

                    b.Navigation("ParticipantTwo");
                });

            modelBuilder.Entity("Matches.Domain.AggregatesModel.MatchAggregate.StateEntity", b =>
                {
                    b.HasOne("Matches.Domain.AggregatesModel.MatchAggregate.MatchEntity", null)
                        .WithMany("States")
                        .HasForeignKey("MatchEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Matches.Domain.AggregatesModel.MatchAggregate.Score", "Score", b1 =>
                        {
                            b1.Property<int>("StateEntityId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseHiLo(b1.Property<int>("StateEntityId"), "Stateseq", "Matches");

                            b1.Property<int>("P1Games")
                                .HasColumnType("integer");

                            b1.Property<int>("P1Points")
                                .HasColumnType("integer");

                            b1.Property<int>("P1Sets")
                                .HasColumnType("integer");

                            b1.Property<int>("P2Games")
                                .HasColumnType("integer");

                            b1.Property<int>("P2Points")
                                .HasColumnType("integer");

                            b1.Property<int>("P2Sets")
                                .HasColumnType("integer");

                            b1.HasKey("StateEntityId");

                            b1.ToTable("States", "Matches");

                            b1.WithOwner()
                                .HasForeignKey("StateEntityId");
                        });

                    b.Navigation("Score");
                });

            modelBuilder.Entity("Matches.Domain.AggregatesModel.MatchAggregate.MatchEntity", b =>
                {
                    b.Navigation("States");
                });
#pragma warning restore 612, 618
        }
    }
}
